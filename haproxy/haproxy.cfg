global
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets    

    log stdout format raw local0 info
    # log         127.0.0.1 local1 notice alert
    # log         127.0.0.1 local2 info alert

    # chroot      /var/lib/haproxy
    # pidfile     /var/run/haproxy.pid
    # maxconn     1000
    # user        haproxy
    # group       haproxy
    # daemon
    # hard-stop-after 300s
    # tune.ssl.default-dh-param 2048

defaults
    log global
    mode http
    option httplog
    option forwardfor
    timeout connect 60s
    timeout client 60s
    timeout server 60s
    default-server init-addr none
  # default-server inter 10s weight 10
    # timeout client 30s
    # timeout server 30s
    # timeout connect 5s
    # option        httplog
    # option        forwardfor       
    # mode          http
    # log           global
    # no option     dontlognull
    # option        http-server-close

resolvers docker_resolver
    nameserver dns 127.0.0.11:53

# frontend stats
#     bind *:8404
#     stats enable
#     stats uri /
#     stats refresh 10s

#------------------ This is the config for * http -----#
## redirect any to https:

# frontend webredirect
#     bind        :80
#     mode        http
#     option      httplog clf
#     redirect    scheme https code 301

#------------------------- End for * http -------------#

# frontend fe_tcp
#     mode tcp
#     bind *:443

#     tcp-request content accept if { req_ssl_hello_type 1 }

#     use_backend     be_authelia if { req_ssl_sni -i auth.int.mxard.tech }
#     default_backend be_to_https

# backend be_to_https
#     mode tcp
#     server haproxy-https 127.0.0.1:8443 check

frontend stats
  bind *:8080
  stats enable
  stats uri /
  stats refresh 10s

frontend fe_https
    mode http
    option httplog
    log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r %sslv %sslc %[ssl_fc_cipherlist_str]"
    bind *:80
    bind *:443 ssl crt /etc/haproxy/certs/ alpn http/1.1
    redirect scheme https code 301 if !{ ssl_fc }
    http-response set-header Strict-Transport-Security max-age=63072000
    
    use_backend     be_http_gitea  if { hdr(host) -i git.int.mxard.tech }

    acl host-authelia hdr(host) -i auth.int.mxard.tech

    http-request set-var(txn.host) hdr(Host)

    http-request set-var(req.scheme) str(https) if { ssl_fc }
    http-request set-var(req.scheme) str(http) if !{ ssl_fc }
    http-request set-var(req.questionmark) str(?) if { query -m found }

    http-request set-header X-Real-IP %[src]
    http-request set-header X-Forwarded-Method %[var(req.method)]
    http-request set-header X-Forwarded-Proto %[var(req.scheme)]
    http-request set-header X-Forwarded-Host %[req.hdr(Host)]
    http-request set-header X-Forwarded-Uri %[path]%[var(req.questionmark)]%[query]

    use_backend     be_authelia    if host-authelia

frontend fe_ssh_git
    bind *:2222
    mode tcp
    log-format "%ci:%cp [%t] %ft %b/%s %Tw/%Tc/%Tt %B %ts %ac/%fc/%bc/%sc/%rc %sq/%bq dst:%[var(sess.dst)] "
    tcp-request content set-var(sess.dst) ssl_fc_sni
    use_backend be_ssh_gitea

backend be_ssh_gitea
    mode tcp
    tcp-request content set-dst var(sess.dst)
    server gitea_ssh_1 gitea_server:22 resolvers docker_resolver

backend be_http_gitea
    mode http
    server gitea_http_1 gitea_server:3000 check maxconn 20 resolvers docker_resolver resolve-prefer ipv4

backend be_authelia
    mode http
    server authelia_1 authelia_server:9091 check maxconn 20 resolvers docker_resolver resolve-prefer ipv4 

