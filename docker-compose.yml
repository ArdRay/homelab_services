version: '3.8'

services:
  proxy:
    image: traefik:v2.6.2@sha256:b8ca739c8361611a964dfa5f023750de17f34e342997c50dbdfb5a38e3450edd
    command:
      - "--providers.docker.endpoint=tcp://socket_proxy.internal:2375"
      - "--providers.docker.swarmMode=false"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=proxy"
      - "--providers.file.directory=/config"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=tls"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.tls.address=:443"
      - "--entrypoints.dns_udp.address=:53/udp"
      - "--entrypoints.dns_tcp.address=:53"
      - "--entrypoints.ping.address=:8082"
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.debug=true"
      - "--log.level=WARN"
      - "--ping.entrypoint=ping"
      - "--metrics.prometheus=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.delayBeforeCheck=0"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    security_opt:
      - no-new-privileges:true
    depends_on:
      socket_proxy:
        condition: service_healthy
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 53
        published: 53
        protocol: tcp
        mode: host
      - target: 53
        published: 53
        protocol: udp
        mode: host
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8082/ping || exit 1
      interval: 5s
      timeout: 10s
    volumes:
      - ./proxy/tls:/letsencrypt
      - ./proxy/tls_options.yml:/config/tls_options.yml:ro
    networks:
      - proxy
      - socket_proxy
      - dns
    environment:
      CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN}
      #HTTP_PROXY: http://http_proxy.internal:3128
      #HTTPS_PROXY: http://http_proxy.internal:3128
      #NO_PROXY: "socket_proxy.internal,*.internal,,127.0.0.1,localhost"
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.traefik_dash.loadbalancer.server.port=8080"
      - "traefik.http.routers.traefik_dash.rule=Host(`services.${INTERNAL_DOMAIN}`) && PathPrefix(`/dashboard`, `/api`)"
      - "traefik.http.routers.traefik_dash.entrypoints=tls"
      - "traefik.http.routers.traefik_dash.tls=true"
      - "traefik.http.routers.traefik_dash.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik_dash.service=api@internal"
    cpus: 2
    mem_limit: 512m
    mem_reservation: 128m
    #<<: *logging

  socket_proxy:
    image: fluencelabs/docker-socket-proxy@sha256:1a0645aff1364aa8047046f8bf7b3aee061fa6dc2765073bee70bb51eccec5df
    hostname: socket_proxy.internal
    restart: always
    networks:
      - socket_proxy
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=0 # Watchtower
      - DELETE=0 # Watchtower
        # GET Optons
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=0 # Portainer, Watchtower
      - INFO=0 # Portainer
      - NETWORKS=0 # Portainer, Watchtower
      - NODES=0
      - PLUGINS=0
      - SERVICES=0 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=0 # Portaienr
      - VOLUMES=0 # Portainer
      # POST Options
      - CONTAINERS_CREATE=0 # WatchTower
      - CONTAINERS_START=0 # WatchTower
      - CONTAINERS_UPDATE=0 # WatchTower
      # DELETE Options
      - CONTAINERS_DELETE=0 # WatchTower
      - IMAGES_DELETE=0 # WatchTower
    healthcheck:
      test: netstat -an | grep 2375 > /dev/null; if [ 0 != $$? ]; then exit 1; fi;
      interval: 5s
      timeout: 10s
    cpus: 0.5
    mem_limit: 64m
    mem_reservation: 32m

  dns:
    image: spx01/blocky:v0.18@sha256:e37a4ab21bd737c584cc733f10ed0d626e86308a547e7201877af85dfc443a7e
    networks:
      - dns
    depends_on:
      proxy:
        condition: service_healthy
    volumes:
      - ./dns/config.yml:/app/config.yml:ro
    environment:
      - TZ=Europe/Berlin
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.udp.routers._dns_udp.entrypoints=dns_udp"
      - "traefik.udp.routers._dns_udp.service=_dns_udp"
      - "traefik.udp.services._dns_udp.loadbalancer.server.port=53"
      - "traefik.tcp.routers._dns_tcp.rule=HostSNI(`*`)"
      - "traefik.tcp.routers._dns_tcp.entrypoints=dns_tcp"
      - "traefik.tcp.routers._dns_tcp.service=_dns_tcp"
      - "traefik.tcp.services._dns_tcp.loadbalancer.server.port=53"
    cpus: 0.5
    mem_limit: 128m
    mem_reservation: 64m
    #<<: *logging

networks:
  proxy:
    driver: bridge
  socket_proxy:
    driver: bridge
    internal: true
  dns:
    driver: bridge