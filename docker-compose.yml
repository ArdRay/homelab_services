version: '3.8'

# x-logging: &logging
#   logging:
#     driver: loki
#     options:
#       loki-url: "http://${LOKI_URL}:3100/loki/api/v1/push"

# x-security: &security
#   security_opt:
#     - "no-new-privileges: true"

services:
  socket_proxy:
    image: fluencelabs/docker-socket-proxy${SOCKET_PROXY_VERSION:-@sha256:1a0645aff1364aa8047046f8bf7b3aee061fa6dc2765073bee70bb51eccec5df}
    hostname: socket_proxy.internal
    restart: always
    networks:
      - socket_proxy
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=0 # Watchtower
      - DELETE=0 # Watchtower
        # GET Optons
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=0 # Portainer, Watchtower
      - INFO=0 # Portainer
      - NETWORKS=0 # Portainer, Watchtower
      - NODES=0
      - PLUGINS=0
      - SERVICES=0 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=0 # Portaienr
      - VOLUMES=0 # Portainer
      # POST Options
      - CONTAINERS_CREATE=0 # WatchTower
      - CONTAINERS_START=0 # WatchTower
      - CONTAINERS_UPDATE=0 # WatchTower
      # DELETE Options
      - CONTAINERS_DELETE=0 # WatchTower
      - IMAGES_DELETE=0 # WatchTower
    healthcheck:
      test: netstat -an | grep 2375 > /dev/null; if [ 0 != $$? ]; then exit 1; fi;
      interval: 5s
      timeout: 10s
    cpus: 0.5
    mem_limit: 64m
    mem_reservation: 32m

  flared:
    image: ghcr.io/flaresolverr/flaresolverr:${FLARED_VERSION:-latest@sha256:cff2167146ba15bf00b1a1ddc142dd8b06a1a93c6addba369eccff5b8da81492}
    network_mode: service:vpn
    environment:
      - LOG_LEVEL=info
      - TZ=Europe/London
    restart: unless-stopped
    cpus: 0.5
    mem_limit: 64m
    mem_reservation: 32m

  vpn:
    image: qmcgaw/gluetun:${GLUETUN_VERSION:-v3.28.1@sha256:c9fd72306d59bb3ed4ac4a1916dd13551c162104d010d1eb1b6611e38904458d}
    hostname: vpn.internal
    networks:
      - vpn
    depends_on:
      proxy:
        condition: service_healthy
    cap_add:
      - NET_ADMIN
    security_opt:
      - no-new-privileges:true
    restart: always
    environment:
      - OPENVPN_USER=${OPENVPN_USER}
      - OPENVPN_PASSWORD=${OPENVPN_PASSWORD}
      - VPN_SERVICE_PROVIDER=protonvpn
      - SERVER_NAMES=HK#1,GE#1,BG#1,FR#54
      - OPENVPN_IPV6=off
      - DOT=off
      - SHADOWSOCKS=off
      - HTTPPROXY=off
      - FIREWALL=off
      - FIREWALL_DEBUG=off
      - TZ=Europe/Berlin
      - PUID=1000
      - PGUID=1000
      - HEALTH_TARGET_ADDRESS=google.com
      - HEALTH_VPN_DURATION_INITIAL=10s
      - HEALTH_VPN_DURATION_ADDITION=5s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vpn-rtr.rule=Host(`downloader.${INTERNAL_DOMAIN}`)"
      - "traefik.http.routers.vpn-rtr.entrypoints=tls"
      - "traefik.http.routers.vpn-rtr.tls=true"
      - "traefik.http.routers.vpn-rtr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.vpn-rtr.service=vpn-svc"
      - "traefik.http.services.vpn-svc.loadbalancer.server.port=8080"
      - "traefik.http.routers.vpn-rtr.middlewares=authelia@docker,default-headers@file"
    cpus: 3
    mem_limit: 512m
    mem_reservation: 128m
    #<<: *logging

  qbittorrent:
    image: ghcr.io/linuxserver/qbittorrent:${QBITTORRENT_VERSION:-4.4.2@sha256:ee73d83e54ebec48e8550b759bb14e6c68b9901bb6c0bbbde2c363476760b3fd}
    network_mode: service:vpn
    depends_on:
      proxy:
        condition: service_healthy
      vpn:
        condition: service_healthy
    restart: always
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
      - UMASK=022
      - WEBUI_PORT=8080
    volumes:
      - /data_cache/qbittorrent/downloads:/downloads
      - /data/qbittorrent/config:/config
    healthcheck:
      test: curl -fSs http://127.0.0.1:8080 || exit 1
      interval: 5s
      timeout: 10s
    cpus: 3
    mem_limit: 2048m
    mem_reservation: 512m
    #<<: *logging

  # rente:
  #   image: nginx:${NGINX_ALPINE_VERSION:-1.21.6-alpine@sha256:4b63f6b2255f7933f52e8d813af4c6bd578b5f8b83387a4de1ce76e55de8beba}
  #   networks:
  #     - rente
  #   depends_on:
  #     proxy:
  #       condition: service_healthy
  #   volumes:
  #     - ./rente/nginx.conf:/etc/nginx/nginx.conf
  #     - ./rente/index.html:/usr/share/nginx/html/index.html
  #   healthcheck:
  #     test: curl -fSs http://127.0.0.1:80 || exit 1
  #     interval: 5s
  #     timeout: 10s
  #   restart: always
  #   cpus: 0.5
  #   mem_limit: 32m
  #   mem_reservation: 16m
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.rente-rtr.rule=Host(`rente.${INTERNAL_DOMAIN}`)"
  #     - "traefik.http.routers.rente-rtr.entrypoints=tls"
  #     - "traefik.http.routers.rente-rtr.tls=true"
  #     - "traefik.http.routers.rente-rtr.tls.certresolver=letsencrypt"
  #     - "traefik.http.routers.rente-rtr.service=rente-svc"
  #     - "traefik.http.services.rente-svc.loadbalancer.server.port=80"
  #     - "traefik.http.routers.rente-rtr.middlewares=authelia@docker,default-headers@file"
  #   # <<: *logging

  proxy:
    image: traefik:${TRAEFIK_VERSION:-v2.6.3@sha256:a1219f2ba73f764ee9c550f3c13045a9264c6b78bdd0b0db6e956a7f96972f48}
    command:
      - "--providers.docker.endpoint=tcp://socket_proxy.internal:2375"
      - "--providers.docker.swarmMode=false"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=t2_proxy"
      - "--providers.file.directory=/config"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=tls"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.tls.address=:443"
      - "--entrypoints.dns_udp.address=:53/udp"
      - "--entrypoints.dns_tcp.address=:53"
      - "--entrypoints.sftp.address=:2222"
      - "--entrypoints.ping.address=:8082"
      - "--entrypoints.postgres_portfolio.address=:5432"
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.debug=true"
      - "--log.level=WARN"
      - "--ping.entrypoint=ping"
      - "--metrics.prometheus=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.delayBeforeCheck=0"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    security_opt:
      - no-new-privileges:true
    depends_on:
      socket_proxy:
        condition: service_healthy
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 53
        published: 53
        protocol: tcp
        mode: host
      - target: 53
        published: 53
        protocol: udp
        mode: host
      - target: 2222
        published: 2222
        protocol: tcp
        mode: host
      - target: 5432
        published: 5432
        protocol: tcp
        mode: host
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8082/ping || exit 1
      interval: 5s
      timeout: 10s
    volumes:
      - /opt/docker/tls:/letsencrypt
      - /opt/docker/traefik/tls_options.yml:/config/tls_options.yml:ro
      - /opt/docker/traefik/default_headers.yml:/config/default_headers.yml:ro
    networks:
      - socket_proxy
      - proxy
      - dns
      #- rente
      - vpn
      - rss
      - media_automation
      - dashboard
      #- nextcloud
      - portfolio
    environment:
      CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN}
      #HTTP_PROXY: http://http_proxy.internal:3128
      #HTTPS_PROXY: http://http_proxy.internal:3128
      #NO_PROXY: "socket_proxy.internal,*.internal,,127.0.0.1,localhost"
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.traefik_dash.loadbalancer.server.port=8080"
      - "traefik.http.routers.traefik_dash.rule=Host(`proxy-01.${INTERNAL_DOMAIN}`) && PathPrefix(`/dashboard`, `/api`)"
      - "traefik.http.routers.traefik_dash.entrypoints=tls"
      - "traefik.http.routers.traefik_dash.tls=true"
      - "traefik.http.routers.traefik_dash.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik_dash.service=api@internal"
      - 'traefik.http.middlewares.authelia.forwardauth.address=https://idp.${INTERNAL_DOMAIN}/api/verify?rd=https://idp.${INTERNAL_DOMAIN}/'
      - 'traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true'
      - 'traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User, Remote-Groups, Remote-Name, Remote-Email'
    cpus: 2
    mem_limit: 512m
    mem_reservation: 128m
    # <<: *logging

  ldap_proxy:
    build: ./stunnel
    hostname: ldap_proxy.internal
    networks:
      - proxies
    environment:
      STUNNEL_SERVICE: ldap
      STUNNEL_ACCEPT: 389
      STUNNEL_CONNECT: ldap.jumpcloud.com:636
    healthcheck:
      test: netstat -an | grep ':389' > /dev/null; if [ 0 != $$? ]; then exit 1; fi;
      interval: 5s
      timeout: 10s
    restart: unless-stopped
    cpus: 1
    mem_limit: 64m
    mem_reservation: 32m
    # <<: *logging

  dns:
    image: spx01/blocky:${BLOCKY_VERSION:-v0.18@sha256:e37a4ab21bd737c584cc733f10ed0d626e86308a547e7201877af85dfc443a7e}
    networks:
      - dns
    depends_on:
      proxy:
        condition: service_healthy
    volumes:
      - ./dns/config.yml:/app/config.yml:ro
    environment:
      - TZ=Europe/Berlin
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.udp.routers._dns_udp.entrypoints=dns_udp"
      - "traefik.udp.routers._dns_udp.service=_dns_udp"
      - "traefik.udp.services._dns_udp.loadbalancer.server.port=53"
      - "traefik.tcp.routers._dns_tcp.rule=HostSNI(`*`)"
      - "traefik.tcp.routers._dns_tcp.entrypoints=dns_tcp"
      - "traefik.tcp.routers._dns_tcp.service=_dns_tcp"
      - "traefik.tcp.services._dns_tcp.loadbalancer.server.port=53"
    cpus: 0.5
    mem_limit: 512m
    mem_reservation: 64m
    #<<: *logging

  # cadvisor:
  #   image: google/cadvisor:latest
  #   networks:
  #     - monitoring_internal
  #   depends_on:
  #     prometheus:
  #       condition: service_healthy
  #   restart: always
  #   environment:
  #     - DOCKER_HOST=tcp://socket_proxy.internal:2375
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - /etc/timezone:/etc/timezone:ro
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #   healthcheck:
  #     test: wget --no-verbose --tries=1 --spider http://localhost:8080 || exit 1
  #     interval: 5s
  #     timeout: 10s
  #   cpus: 2
  #   mem_limit: 1024m
  #   mem_reservation: 256m
    #<<: *logging

  emby:
    image: ghcr.io/linuxserver/emby:${EMBY_VERSION:-4.6.7@sha256:84776ef60c8f06306274a4688c9bea3192f9c00d834a7024cca2b01a5a0bf554}
    networks:
      - proxy
      - media_automation
      - proxies
    depends_on:
      proxy:
        condition: service_healthy
      ldap_proxy:
        condition: service_healthy
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Europe/Berlin
      # HTTP_PROXY: http://http_proxy.internal:3128
      # HTTPS_PROXY: http://http_proxy.internal:3128
      # NO_PROXY: "*.internal,192.168.0.0/16,127.0.0.1,localhost"
    volumes:
      - /data/emby/config:/config
      - /data/emby/persistent:/persistent
      - /data/movies:/data/movies
      - /data/series:/data/tvshows
    healthcheck:
     test: curl -fSs http://127.0.0.1:8096 || exit 1
     interval: 5s
     timeout: 10s
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.emby-rtr.rule=Host(`emby.${INTERNAL_DOMAIN}`)"
      - "traefik.http.routers.emby-rtr.entrypoints=tls"
      - "traefik.http.routers.emby-rtr.tls=true"
      - "traefik.http.routers.emby-rtr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.emby-rtr.service=emby-svc"
      - "traefik.http.services.emby-svc.loadbalancer.server.port=8096"
    cpus: 18
    mem_limit: 8192m
    mem_reservation: 512m
    # <<: *logging
 
  sonarr:
    image: ghcr.io/linuxserver/sonarr:${SONARR_VERSION:-3.0.7@sha256:d055e6a69617b1604d30c12bbaa48ae3ccb12108ba9c1155808acacfe760634e}
    networks:
      - media_automation
      - vpn
    depends_on:
      proxy:
        condition: service_healthy
      jackett:
        condition: service_healthy
      qbittorrent:
        condition: service_healthy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
      - UMASK=022
    volumes:
      - /data/sonarr:/config
      - /data/series:/tv
      - /data_cache/qbittorrent/downloads:/downloads
    healthcheck:
      test: curl -fSs http://127.0.0.1:8989 || exit 1
      interval: 5s
      timeout: 10s
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`series.${INTERNAL_DOMAIN}`)"
      - "traefik.http.routers.sonarr.entrypoints=tls"
      - "traefik.http.routers.sonarr.tls=true"
      - "traefik.http.routers.sonarr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.sonarr.service=sonarr"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
    cpus: 2
    mem_limit: 512m
    mem_reservation: 128m
    #<<: *logging

  radarr:
    image: ghcr.io/linuxserver/radarr:${RADARR_VERSION:-4.0.5@sha256:01323a4640f694b485ef9b491b8117a3deefd33e20823ac7bb5f8e34109b1a50}
    networks:
      - media_automation
      - vpn
    depends_on:
      proxy:
        condition: service_healthy
      jackett:
        condition: service_healthy
      qbittorrent:
        condition: service_healthy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
      - UMASK=022
    volumes:
      - /data/radarr:/config
      - /data/movies:/movies
      - /data_cache/qbittorrent/downloads:/downloads
    healthcheck:
      test: curl -fSs http://127.0.0.1:7878 || exit 1
      interval: 5s
      timeout: 10s
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`movies.${INTERNAL_DOMAIN}`)"
      - "traefik.http.routers.radarr.entrypoints=tls"
      - "traefik.http.routers.radarr.tls=true"
      - "traefik.http.routers.radarr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.radarr.service=radarr"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
    cpus: 2
    mem_limit: 512m
    mem_reservation: 128m
    #<<: *logging

  jackett:
    image: ghcr.io/linuxserver/jackett:${JACKETT_VERSION:-0.20.788@sha256:72b7442aef21d01fb9e852387daf815187a87171555f140622df060624ca1aaa}
    networks:
      - media_automation
      - vpn
    depends_on:
      proxy:
        condition: service_healthy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
    volumes:
      - /data_cache/qbittorrent/downloads:/downloads
      - /data/jackett:/config
    healthcheck:
      test: curl -fSs http://127.0.0.1:9117 || exit 1
      interval: 5s
      timeout: 10s
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jackett.rule=Host(`jaeckli.${INTERNAL_DOMAIN}`)"
      - "traefik.http.routers.jackett.entrypoints=tls"
      - "traefik.http.routers.jackett.tls=true"
      - "traefik.http.routers.jackett.tls.certresolver=letsencrypt"
      - "traefik.http.routers.jackett.service=jackett"
      - "traefik.http.services.jackett.loadbalancer.server.port=9117" 
    cpus: 2
    mem_limit: 512m
    mem_reservation: 128m
    #<<: *logging

  dashboard:
    image: linuxserver/heimdall:${HEIMDALL_VERSION:-2.4.10@sha256:8a9ddae0cda12aa08fe3a84413a6a1bdf6ae9937c06131cd7f0ccc3f76dbee44}
    networks:
      - dashboard
    depends_on:
      proxy:
        condition: service_healthy
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Europe/Berlin
    volumes:
      - /data/dashboard:/config
    healthcheck:
      test: curl -fSs http://127.0.0.1:80 || exit 1
      interval: 5s
      timeout: 10s
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.${INTERNAL_DOMAIN}`)"
      - "traefik.http.routers.dashboard.entrypoints=tls"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=dashboard"
      - "traefik.http.services.dashboard.loadbalancer.server.port=80"
      - "traefik.http.routers.dashboard.middlewares=authelia@docker,default-headers@file"
    cpus: 1
    mem_limit: 512m
    mem_reservation: 128m
    # <<: *logging

  # rss:
  #   image: miniflux/miniflux:${MINIFLUX_VERSION:-2.0.36@sha256:3131917419c1ad1065796e628335fed6ae0cf68e4fb7af88746894354f070696}
  #   networks:
  #     - rss
  #   depends_on:
  #     proxy:
  #       condition: service_healthy
  #   depends_on:
  #     postgres_rss:
  #       condition: service_healthy
  #   environment:
  #     DATABASE_URL: "postgres://${POSTGRES_MINIFLUX_USER}:${POSTGRES_MINIFLUX_PASSWORD}@postgres_rss/miniflux?sslmode=disable"
  #     RUN_MIGRATIONS: 1
  #     CREATE_ADMIN: 1
  #     ADMIN_USERNAME: ${MINIFLUX_USER}
  #     ADMIN_PASSWORD: ${MINIFLUX_PASSWORD}
  #     AUTH_PROXY_HEADER: Remote-User
  #     AUTH_PROXY_USER_CREATION: true
  #   healthcheck:
  #     test: ["CMD", "/usr/bin/miniflux", "-healthcheck", "auto"]
  #     start_period: 30s
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.rss.rule=Host(`rss.${INTERNAL_DOMAIN}`)"
  #     - "traefik.http.routers.rss.entrypoints=tls"
  #     - "traefik.http.routers.rss.tls=true"
  #     - "traefik.http.routers.rss.tls.certresolver=letsencrypt"
  #     - "traefik.http.routers.rss.service=rss"
  #     - "traefik.http.services.rss.loadbalancer.server.port=8080"
  #     - "traefik.http.routers.rss.middlewares=authelia@docker,default-headers@file"
  #   cpus: 2
  #   mem_limit: 256m
  #   mem_reservation: 128m
  #   # <<: *logging

  # postgres_rss:
  #   image: postgres:${POSTGRES_ALPINE_VERSION:-14.2-alpine3.15@sha256:ddcffbdfad26e68db36cbcc7a50f03ee2aa8079bb986d92d0b3a5da51f2f9baf}
  #   restart: always
  #   networks:
  #     - rss
  #   volumes:
  #     - /data/postgres_rss:/var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_DB=miniflux
  #     - POSTGRES_USER=${POSTGRES_MINIFLUX_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_MINIFLUX_PASSWORD}
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-q"]
  #     interval: 10s
  #     start_period: 30s
  #   cpus: 1
  #   mem_limit: 128m
  #   mem_reservation: 64m
  #   # <<: *logging
  
  postgres_portfolio:
    image: postgres:14.5@sha256:8d46fa657b46fb96a707b3dff90ff95014476874a96389f0370c1c2a2846f249
    restart: always
    networks:
      - portfolio
    volumes:
      - /data/postgres_portfolio:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=portfolio
      - POSTGRES_USER=${POSTGRES_PORTFOLIO_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PORTFOLIO_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready", "-q"]
      interval: 10s
      start_period: 30s
    cpus: 1
    mem_limit: 128m
    mem_reservation: 64m
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.postgres_portfolio.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.postgres_portfolio.entrypoints=postgres_portfolio"
      - "traefik.tcp.routers.postgres_portfolio.service=postgres_portfolio"
      - "traefik.tcp.services.postgres_portfolio.loadbalancer.server.port=5432"

  # deemix:
  #   image: registry.gitlab.com/bockiii/deemix-docker
  #   networks:
  #     - deemix
  #   depends_on:
  #     proxy:
  #       condition: service_healthy
  #   volumes:
  #     - /data_cache/qbittorrent/downloads:/downloads
  #     - /data/deemix:/config
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - UMASK_SET=022
  #   healthcheck:
  #     test: curl -fSs http://127.0.0.1:6595 || exit 1
  #     interval: 5s
  #     timeout: 10s
  #   cpus: 1
  #   mem_limit: 512m
  #   mem_reservation: 128m
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.music.rule=Host(`music.${INTERNAL_DOMAIN}`)"
  #     - "traefik.http.routers.music.entrypoints=tls"
  #     - "traefik.http.routers.music.tls=true"
  #     - "traefik.http.routers.music.tls.certresolver=letsencrypt"
  #     - "traefik.http.routers.music.service=deemix"
  #     - "traefik.http.services.deemix.loadbalancer.server.port=6595"
    #<<: *logging

  # postgres_nextcloud:
  #   image: postgres:${POSTGRES_ALPINE_VERSION:-14.2-alpine3.15@sha256:ddcffbdfad26e68db36cbcc7a50f03ee2aa8079bb986d92d0b3a5da51f2f9baf}
  #   restart: always
  #   networks:
  #     - nextcloud
  #   volumes:
  #     - /data/postgres_nextcloud:/var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_DB=nextcloud_db
  #     - POSTGRES_USER=${POSTGRES_NEXTCLOUD_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_NEXTCLOUD_PASSWORD}
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-q"]
  #     interval: 10s
  #     start_period: 30s
  #   cpus: 1
  #   mem_limit: 128m
  #   mem_reservation: 64m
  #   # <<: *logging

  redis:
    image: redis:${REDIS_ALPINE_VERSION:-alpine3.15@sha256:32f8cf4bf6412626b21273fed376182b6786b75182e4a19f90f3f57d01362fbb}
    hostname: redis.internal
    restart: always
    networks:
      - redis
    volumes:
      - /data/redis:/var/lib/redis
    cpus: 1
    mem_limit: 64m
    mem_reservation: 32m
    # <<: *logging

  # nextcloud:
  #   image: nextcloud:23.0
  #   hostname: nextcloud.internal
  #   restart: always
  #   networks:
  #     - nextcloud
  #     - proxy
  #     - redis
  #     - proxies
  #   depends_on:
  #     proxy:
  #       condition: service_healthy
  #     postgres_nextcloud:
  #       condition: service_started
  #     redis:
  #       condition: service_started
  #   volumes:
  #     - /data/nextcloud_config:/var/www/html
  #     - /data/nextcloud_data:/var/www/html/data
  #     - /data/ebooks:/data/ebooks
  #     - /data/audiobooks:/data/audiobooks
  #   environment:
  #     - POSTGRES_HOST=postgres_nextcloud
  #     - POSTGRES_USER=${POSTGRES_NEXTCLOUD_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_NEXTCLOUD_PASSWORD}
  #     - POSTGRES_DB=nextcloud_db
  #     - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
  #     - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USERNAME}
  #     - NEXTCLOUD_TRUSTED_DOMAINS=cloud.${INTERNAL_DOMAIN}
  #     - OVERWRITEHOST=cloud.${INTERNAL_DOMAIN}
  #     - OVERWRITEPROTOCOL=https
  #     - REDIS_HOST=redis.internal
  #   # healthcheck:
  #   #   test: curl -fSs http://127.0.0.1:80/ocs/v2.php/apps/serverinfo/api/v1/info || exit 1
  #   #   interval: 10s
  #   #   start_period: 120s
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.nextcloud.rule=Host(`cloud.${INTERNAL_DOMAIN}`)"
  #     - "traefik.http.routers.nextcloud.entrypoints=tls"
  #     - "traefik.http.routers.nextcloud.tls=true"
  #     - "traefik.http.routers.nextcloud.tls.certresolver=letsencrypt"
  #     - "traefik.http.routers.nextcloud.service=nextcloud"
  #     - "traefik.http.services.nextcloud.loadbalancer.server.port=80"
  #     - "traefik.http.middlewares.nextcloud-redirect.redirectregex.regex=https://(.*)/.well-known/(card|cal)dav"
  #     - "traefik.http.middlewares.nextcloud-redirect.redirectregex.replacement=https://$${1}/remote.php/dav/"
  #     - "traefik.http.middlewares.nextcloud-redirect.redirectregex.permanent=true"
  #     - "traefik.http.routers.nextcloud.middlewares=nextcloud-redirect@docker"
  #   cpus: 6
  #   mem_limit: 4096m
  #   mem_reservation: 1024m
    # <<: *logging

  # nextcloud_exporter:
  #   image: xperimental/nextcloud-exporter
  #   hostname: nextcloud_exporter.internal
  #   environment:
  #     NEXTCLOUD_SERVER: "http://nextcloud.internal"
  #     NEXTCLOUD_AUTH_TOKEN: ${NEXTCLOUD_TOKEN}
  #   cpus: 1
  #   mem_limit: 256m
  #   mem_reservation: 128m

  # postgres_matrix:
  #   image: postgres:14.1-bullseye@sha256:3691c00fc177519261bc07b06d0aa990bb17e1bfc31dd79662c9dbd432d2d48b
  #   restart: unless-stopped
  #   networks:
  #     - matrix
  #   volumes:
  #    - /data/postgres_matrix:/var/lib/postgresql/data
  #   environment:
  #    - POSTGRES_DB=synapse
  #    - POSTGRES_USER=${POSTGRES_MATRIX_USER}
  #    - POSTGRES_PASSWORD=${POSTGRES_MATRIX_PASSWORD}
  #    - POSTGRES_INITDB_ARGS='--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-q"]
  #     interval: 10s
  #     start_period: 30s
  #   cpus: 1
  #   mem_limit: 512m
  #   mem_reservation: 64m
     
  # element_matrix:
  #   image: vectorim/element-web:latest
  #   restart: unless-stopped
  #   volumes:
  #     - ./element-config.json:/app/config.json
  #   networks:
  #     - proxy
  #     - matrix
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.element-rtr.rule=Host(`element.${INTERNAL_DOMAIN}`)"
  #     - "traefik.http.routers.element-rtr.entrypoints=tls"
  #     - "traefik.http.routers.element-rtr.tls=true"
  #     - "traefik.http.routers.element-rtr.tls.certresolver=letsencrypt"
  #     - "traefik.http.routers.element-rtr.service=element-svc"
  #     - "traefik.http.services.element-svc.loadbalancer.server.port=80"
  #     - "traefik.http.routers.element-rtr.middlewares=default-header@file"
  #   cpus: 2
  #   mem_limit: 2048m
  #   mem_reservation: 512m  

  # synapse_matrix:
  #   image: matrixdotorg/synapse:latest
  #   restart: unless-stopped
  #   depends_on:
  #     postgres_matrix:
  #       condition: service_healthy
  #   networks:
  #     - proxy
  #     - matrix
  #   volumes:
  #     - /opt/docker/synapse:/data
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.matrix-rtr.rule=Host(`matrix.${INTERNAL_DOMAIN}`)"
  #     - "traefik.http.routers.matrix-rtr.entrypoints=tls"
  #     - "traefik.http.routers.matrix-rtr.tls=true"
  #     - "traefik.http.routers.matrix-rtr.tls.certresolver=letsencrypt"
  #     - "traefik.http.routers.matrix-rtr.service=matrix-svc"
  #     - "traefik.http.services.matrix-svc.loadbalancer.server.port=8008"
  #     - "traefik.http.routers.matrix-rtr.middlewares=default-header@file"

  # sftp:
  #   image: emberstack/sftp:${SFTP_VERSION:-5.1.5@sha256:f1633cb7ed92c3a9ac15e70a1c3f35c7f3da3f6a2c2dd84b1e0f34d980c9601a}
  #   restart: unless-stopped
  #   networks:
  #     - proxy
  #   depends_on:
  #     proxy:
  #       condition: service_healthy
  #   volumes:
  #     - /opt/docker/sftp/sftp.json:/app/config/sftp.json:ro
  #     - /data/sftp/lexmark:/home/lexmark/sftp:rw
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.tcp.routers.sftp.rule=HostSNI(`*`)"
  #     - "traefik.tcp.routers.sftp.entrypoints=sftp"
  #     - "traefik.tcp.routers.sftp.service=sftp"
  #     - "traefik.tcp.services.sftp.loadbalancer.server.port=22"
  #   cpus: 1
  #   mem_limit: 256m
  #   mem_reservation: 128m

networks:
  proxy:
    external: true
    name: t2_proxy
  socket_proxy:
    driver: bridge
    internal: true
  # rente:
  #   driver: bridge
  #   internal: true
  vpn:
    driver: bridge
  dns:
    driver: bridge
  dashboard:
    driver: bridge
  rss:
    driver: bridge
  media_automation:
    driver: bridge
  # postgres:
  #   driver: bridge
  #   internal: true
  #nextcloud:
  #  driver: bridge
  proxies:
    driver: bridge
  redis:
    driver: bridge
    internal: true
  # sftp:
  #   driver: bridge
  #   internal: true
  portfolio:
    driver: bridge
    internal: true
